enum ExecutionState {
  UNINITIALIZED
  REQUESTED
  ACCEPTED
  DISPUTED
  REFUNDED
  VALIDATED
}

enum PaymentType {
  VISIBILITY_CREDITS # Legacy
  ETH
  ERC20 # further implementation
}

####################
## Model entities ##
####################

type Protocol @entity {
  id: Bytes! # Bytes(0)
  totalValueLocked: BigDecimal! # ETH value
}

type Sbt @entity(immutable: true) {
  id: Bytes!
  owner: User! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: Bytes! # address
  partner: User # address
  balances: [VisibilityBalance!]! @derivedFrom(field: "user")
  claimedCreatorEarnings: [CreatorFeeClaimed!]! @derivedFrom(field: "creator")
  partnerTradesEarnings: [CreditsTrade!]! @derivedFrom(field: "partner")
  referrersAsPartner: [User!]! @derivedFrom(field: "partner")
  referralTradesEarnings: [CreditsTrade!]! @derivedFrom(field: "referrer")
  requestedServices: [VisibilityServiceExecution!]!
    @derivedFrom(field: "requester")
  sbt: [Sbt!]! @derivedFrom(field: "owner")
  trades: [CreditsTrade!]! @derivedFrom(field: "user")
  visibilities: [Visibility!]! @derivedFrom(field: "creator")
}

type UserDayActivity @entity {
  id: Bytes! # address && DD-MM-YYYY
  user: User! # address
  day: String! # DD-MM-YYYY
  dayTimestamp: Int8! # ms timestamp
  isActiveUser: Boolean! # if user trade > 0.03 ETH
  volume: BigInt! # tradeCost - sum from user trades
  protocolFees: BigInt! # protocolFees user sent
  creatorFees: BigInt! # creatorFees user received
  referrerFees: BigInt! # referrerFees user received
  partnerFees: BigInt! # partnerFees user received
  cursorId: BigInt!
}

type UsersDayActivity @entity {
  id: Bytes! # DD-MM-YYYY
  day: String!
  dayTimestamp: Int8!
  nbActiveUsers: BigInt!
  volume: BigInt!
  protocolFees: BigInt!
  creatorFees: BigInt!
  referrerFees: BigInt!
  partnerFees: BigInt!
}

type Visibility @entity {
  id: Bytes! # visibilityId
  visibilityId: String! # visibilityId
  creator: User # address
  metadata: String # string
  currentPrice: BigInt! # uint256
  totalSupply: BigInt! # uint256
  claimableFeeBalance: BigInt! # uint256
  buyBackEthBalance: BigInt! # uint256
  balances: [VisibilityBalance!]! @derivedFrom(field: "visibility")
  buyBacks: [BuyBack!]! @derivedFrom(field: "visibility")
  trades: [CreditsTrade!]! @derivedFrom(field: "visibility")
  services: [VisibilityService!]! @derivedFrom(field: "visibility")
}

type VisibilityBalance @entity {
  id: Bytes! # visibilityId-userAddress
  visibility: Visibility!
  user: User! # userAddress
  balance: BigInt! # uint256
  lastUpdated: BigInt! # uint256
  cursorId: BigInt!
}

type VisibilityService @entity {
  id: Bytes! # serviceNonce
  serviceNonce: BigInt! # uint256
  paymentType: PaymentType! # enum
  originator: User! # address
  visibility: Visibility!
  serviceType: String! # string
  creditsCostAmount: BigInt! # uint256
  enabled: Boolean! # bool
  weiCostAmount: BigInt! # uint256
  buyBackCreditsShare: BigInt! # uint256
  executions: [VisibilityServiceExecution!]! @derivedFrom(field: "service")
  serviceExecutionEthPayments: [ServiceExecutionEthPayment!]!
    @derivedFrom(field: "service")
}

type VisibilityServiceExecution @entity {
  id: Bytes! # serviceNonce-executionNonce
  state: ExecutionState!
  service: VisibilityService!
  executionNonce: BigInt! # uint256
  requester: User! # address
  canceler: User # address
  requestData: String! # string
  responseData: String # string
  cancelData: String # string
  disputeData: String # string
  resolveData: String # string
  lastUpdated: BigInt! # uint256
  ethPayment: ServiceExecutionEthPayment
  informations: [ServiceExecutionInformation!]!
    @derivedFrom(field: "serviceExecution")
}

#####################
## Events entities ##
#####################

type BuyBack @entity(immutable: true) {
  id: Bytes!
  visibility: Visibility!
  weiCost: BigInt! # uint256
  creditsAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BuyBackPoolUpdated @entity(immutable: true) {
  id: Bytes!
  visibility: Visibility!
  isBuyBack: Boolean! # bool
  weiAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreditsTrade @entity(timeseries: true) {
  id: Int8!
  user: User! # userAddress
  visibility: Visibility!
  amount: BigInt! # uint256
  isBuy: Boolean! # bool
  buyCost: BigInt! # uint256
  sellReimbursement: BigInt! # uint256
  tradeValue: BigDecimal! # ETH value
  tradeCost: BigInt! # uint256
  creatorFee: BigInt! # uint256
  protocolFee: BigInt! # uint256
  referrerFee: BigInt! # uint256
  partnerFee: BigInt! # uint256
  referrer: User # address
  partner: User # address
  newTotalSupply: BigInt! # uint256
  newCurrentPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  timestamp: Timestamp
}

type CreatorFeeClaimed @entity(immutable: true) {
  id: Int8!
  creator: User! # address
  amount: BigInt! # uint256
  visibility: Visibility! # visibilityId
  from: User! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  timestamp: Timestamp
}

type CreatorVisibilitySet @entity(immutable: true) {
  id: Bytes!
  visibility: String!
  creator: Bytes! # address
  metadata: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreditsTransfer @entity(immutable: true) {
  id: Bytes!
  visibility: Visibility!
  from: User! # address
  to: User! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReferrerPartnerSet @entity(immutable: true) {
  id: Bytes!
  referrer: User! # address
  partner: User # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceBuyBackUpdated @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  buyBackCreditsShare: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceCreated @entity(immutable: true) {
  id: Bytes!
  originator: User! # userAddress
  nonce: BigInt! # uint256
  serviceType: String! # string
  visibility: Visibility!
  creditsCostAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceWithETHCreated @entity(immutable: true) {
  id: Bytes!
  originator: User! # userAddress
  nonce: BigInt! # uint256
  serviceType: String! # string
  visibility: Visibility!
  buyBackCreditsShare: BigInt! # uint256
  weiCostAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionAccepted @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  responseData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionCanceled @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  user: User! # userAddress
  cancelData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionDisputed @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  disputeData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionEthPayment @entity(immutable: true) {
  id: Bytes!
  service: VisibilityService! # serviceNonce
  protocolAmount: BigInt! # uint256
  creatorAmount: BigInt! # uint256
  buyBackAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionInformation @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  serviceExecution: VisibilityServiceExecution! # serviceNonce-executionNonce
  user: User! # userAddress
  fromCreator: Boolean! # bool
  fromRequester: Boolean! # bool
  fromDisputeResolver: Boolean! # bool
  informationData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionRequested @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  requester: Bytes! # address
  requestData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionResolved @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  refund: Boolean! # bool
  resolveData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionValidated @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceUpdated @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  enabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

###################
# Stats entities ##
###################

type CreditsTradeAllStats
  @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
  id: Int8!
  timestamp: Timestamp!
  volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
  totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
  protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
  creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
  referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
  partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
  count: BigInt! @aggregate(fn: "count", arg: "id")
  lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
}

type CreditsTradeVisibilityStats
  @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
  id: Int8!
  visibility: Visibility! @group(by: ["visibility"])
  timestamp: Timestamp!
  minSupply: BigInt! @aggregate(fn: "min", arg: "newTotalSupply")
  maxSupply: BigInt! @aggregate(fn: "max", arg: "newTotalSupply")
  minPrice: BigInt! @aggregate(fn: "min", arg: "newCurrentPrice")
  maxPrice: BigInt! @aggregate(fn: "max", arg: "newCurrentPrice")
  volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
  totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
  protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
  creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
  referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
  partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
  count: BigInt! @aggregate(fn: "count", arg: "id")
  lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
}
