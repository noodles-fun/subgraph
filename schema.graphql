enum ExecutionState {
  UNINITIALIZED
  REQUESTED
  ACCEPTED
  DISPUTED
  REFUNDED
  VALIDATED
}

type Sbt @entity(immutable: true) {
  id: Bytes!
  owner: User! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: Bytes! # address
  partner: User # address
  balances: [VisibilityBalance!]! @derivedFrom(field: "user")
  claimedCreatorEarnings: [CreatorFeeClaimed!]! @derivedFrom(field: "creator")
  partnerTradesEarnings: [CreditsTrade!]! @derivedFrom(field: "partner")
  referrersAsPartner: [User!]! @derivedFrom(field: "partner")
  referralTradesEarnings: [CreditsTrade!]! @derivedFrom(field: "referrer")
  requestedServices: [VisibilityServiceExecution!]!
    @derivedFrom(field: "requester")
  sbt: [Sbt!]! @derivedFrom(field: "owner")
  trades: [CreditsTrade!]! @derivedFrom(field: "user")
  visibilities: [Visibility!]! @derivedFrom(field: "creator")
}

type Visibility @entity {
  id: Bytes! # visibilityId
  visibilityId: String! # visibilityId
  creator: User # address
  metadata: String # string
  currentPrice: BigInt! # uint256
  totalSupply: BigInt! # uint256
  claimableFeeBalance: BigInt! # uint256
  balances: [VisibilityBalance!]! @derivedFrom(field: "visibility")
  trades: [CreditsTrade!]! @derivedFrom(field: "visibility")
  services: [VisibilityService!]! @derivedFrom(field: "visibility")
}

type VisibilityBalance @entity {
  id: Bytes! # visibilityId-userAddress
  visibility: Visibility!
  user: User! # userAddress
  balance: BigInt! # uint256
  balanceValue: BigDecimal! # ETH value
  lastUpdated: BigInt! # uint256
}

type VisibilityService @entity {
  id: Bytes! # serviceNonce
  serviceNonce: BigInt! # uint256
  visibility: Visibility!
  serviceType: String! # string
  creditsCostAmount: BigInt! # uint256
  enabled: Boolean! # bool
  executions: [VisibilityServiceExecution!]! @derivedFrom(field: "service")
}

type VisibilityServiceExecution @entity {
  id: Bytes! # serviceNonce-executionNonce
  state: ExecutionState!
  service: VisibilityService!
  executionNonce: BigInt! # uint256
  requester: User! # address
  canceler: User # address
  requestData: String! # string
  responseData: String # string
  cancelData: String # string
  disputeData: String # string
  resolveData: String # string
  lastUpdated: BigInt! # uint256
}

type CreatorFeeClaimed @entity(timeseries: true) {
  id: Int8!
  creator: User! # address
  amount: BigInt! # uint256
  visibility: Visibility! # visibilityId
  from: User! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  timestamp: Timestamp
}

type CreditsTrade @entity(timeseries: true) {
  id: Int8!
  user: User! # userAddress
  userInBigInt: BigInt! # uint256
  visibility: Visibility!
  amount: BigInt! # uint256
  isBuy: Boolean! # bool
  buyCost: BigInt! # uint256
  sellReimbursement: BigInt! # uint256
  tradeCost: BigInt! # uint256
  creatorFee: BigInt! # uint256
  protocolFee: BigInt! # uint256
  referrerFee: BigInt! # uint256
  partnerFee: BigInt! # uint256
  referrer: User # address
  partner: User # address
  newTotalSupply: BigInt! # uint256
  newCurrentPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  timestamp: Timestamp
}

type CreatorVisibilitySet @entity(immutable: true) {
  id: Bytes!
  visibility: String!
  creator: Bytes! # address
  metadata: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreditsTransfer @entity(immutable: true) {
  id: Bytes!
  visibility: Visibility!
  from: User! # address
  to: User! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReferrerPartnerSet @entity(immutable: true) {
  id: Bytes!
  referrer: User! # address
  partner: User # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceCreated @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  serviceType: String! # string
  visibility: Visibility!
  creditsCostAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionAccepted @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  responseData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionCanceled @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  user: User! # userAddress
  cancelData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionDisputed @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  disputeData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionRequested @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  requester: Bytes! # address
  requestData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionResolved @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  refund: Boolean! # bool
  resolveData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceExecutionValidated @entity(immutable: true) {
  id: Bytes!
  serviceNonce: BigInt! # uint256
  executionNonce: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ServiceUpdated @entity(immutable: true) {
  id: Bytes!
  nonce: BigInt! # uint256
  enabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

###################
## Stats entities
###################

# type CreditsTradeAllStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
#   protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
#   creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
#   referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
#   partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   userCount: BigInt! @aggregate(fn: "count", arg: "userInBigInt")
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeAllCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost", cumulative: true)
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   protocolFees: BigInt!
#     @aggregate(fn: "sum", arg: "protocolFee", cumulative: true)
#   creatorFees: BigInt!
#     @aggregate(fn: "sum", arg: "creatorFee", cumulative: true)
#   referrerFees: BigInt!
#     @aggregate(fn: "sum", arg: "referrerFee", cumulative: true)
#   partnerFees: BigInt!
#     @aggregate(fn: "sum", arg: "partnerFee", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   userCount: BigInt!
#     @aggregate(fn: "count", arg: "userInBigInt", cumulative: true)
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeVisibilityStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   visibility: Visibility! @group(by: ["visibility"])
#   timestamp: Timestamp!
#   minSupply: BigInt! @aggregate(fn: "min", arg: "newTotalSupply")
#   maxSupply: BigInt! @aggregate(fn: "max", arg: "newTotalSupply")
#   minPrice: BigInt! @aggregate(fn: "min", arg: "newCurrentPrice")
#   maxPrice: BigInt! @aggregate(fn: "max", arg: "newCurrentPrice")
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
#   protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
#   creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
#   referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
#   partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   userCount: BigInt! @aggregate(fn: "count", arg: "userInBigInt")
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeVisibilityCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   visibility: Visibility! @group(by: ["visibility"])
#   timestamp: Timestamp!
#   minSupply: BigInt! @aggregate(fn: "min", arg: "newTotalSupply")
#   maxSupply: BigInt! @aggregate(fn: "max", arg: "newTotalSupply")
#   minPrice: BigInt! @aggregate(fn: "min", arg: "newCurrentPrice")
#   maxPrice: BigInt! @aggregate(fn: "max", arg: "newCurrentPrice")
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost", cumulative: true)
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   protocolFees: BigInt!
#     @aggregate(fn: "sum", arg: "protocolFee", cumulative: true)
#   creatorFees: BigInt!
#     @aggregate(fn: "sum", arg: "creatorFee", cumulative: true)
#   referrerFees: BigInt!
#     @aggregate(fn: "sum", arg: "referrerFee", cumulative: true)
#   partnerFees: BigInt!
#     @aggregate(fn: "sum", arg: "partnerFee", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   userCount: BigInt!
#     @aggregate(fn: "count", arg: "userInBigInt", cumulative: true)
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeUserStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   userAddress: Bytes! @group(by: ["userAddress"])
#   timestamp: Timestamp!
#   totalBuyCost: BigInt! @aggregate(fn: "sum", arg: "buyCost")
#   totalSellReimbursement: BigInt!
#     @aggregate(fn: "sum", arg: "sellReimbursement")
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
#   protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
#   creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
#   referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
#   partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeUserCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   userAddress: Bytes! @group(by: ["userAddress"])
#   totalBuyCost: BigInt! @aggregate(fn: "sum", arg: "buyCost", cumulative: true)
#   totalSellReimbursement: BigInt!
#     @aggregate(fn: "sum", arg: "sellReimbursement", cumulative: true)
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost", cumulative: true)
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   protocolFees: BigInt!
#     @aggregate(fn: "sum", arg: "protocolFee", cumulative: true)
#   creatorFees: BigInt!
#     @aggregate(fn: "sum", arg: "creatorFee", cumulative: true)
#   referrerFees: BigInt!
#     @aggregate(fn: "sum", arg: "referrerFee", cumulative: true)
#   partnerFees: BigInt!
#     @aggregate(fn: "sum", arg: "partnerFee", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   unitCount: BigInt! @aggregate(fn: "max", arg: "1", cumulative: true)
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeReferrerStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   referrer: Bytes! @group(by: ["referrer"])
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
#   protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
#   creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
#   referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
#   partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   userCount: BigInt! @aggregate(fn: "count", arg: "userInBigInt")
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradeReferrerCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   referrer: Bytes! @group(by: ["referrer"])
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost", cumulative: true)
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   protocolFees: BigInt!
#     @aggregate(fn: "sum", arg: "protocolFee", cumulative: true)
#   creatorFees: BigInt!
#     @aggregate(fn: "sum", arg: "creatorFee", cumulative: true)
#   referrerFees: BigInt!
#     @aggregate(fn: "sum", arg: "referrerFee", cumulative: true)
#   partnerFees: BigInt!
#     @aggregate(fn: "sum", arg: "partnerFee", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   userCount: BigInt!
#     @aggregate(fn: "count", arg: "userInBigInt", cumulative: true)
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradePartnerStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   partner: Bytes! @group(by: ["partner"])
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost")
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount")
#   protocolFees: BigInt! @aggregate(fn: "sum", arg: "protocolFee")
#   creatorFees: BigInt! @aggregate(fn: "sum", arg: "creatorFee")
#   referrerFees: BigInt! @aggregate(fn: "sum", arg: "referrerFee")
#   partnerFees: BigInt! @aggregate(fn: "sum", arg: "partnerFee")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   userCount: BigInt! @aggregate(fn: "count", arg: "userInBigInt")
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreditsTradePartnerCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreditsTrade") {
#   id: Int8!
#   partner: Bytes! @group(by: ["partner"])
#   timestamp: Timestamp!
#   volume: BigInt! @aggregate(fn: "sum", arg: "tradeCost", cumulative: true)
#   totalAmount: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   protocolFees: BigInt!
#     @aggregate(fn: "sum", arg: "protocolFee", cumulative: true)
#   creatorFees: BigInt!
#     @aggregate(fn: "sum", arg: "creatorFee", cumulative: true)
#   referrerFees: BigInt!
#     @aggregate(fn: "sum", arg: "referrerFee", cumulative: true)
#   partnerFees: BigInt!
#     @aggregate(fn: "sum", arg: "partnerFee", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   userCount: BigInt!
#     @aggregate(fn: "count", arg: "userInBigInt", cumulative: true)
#   lastTradeTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreatorFeeClaimedStats
#   @aggregation(intervals: ["hour", "day"], source: "CreatorFeeClaimed") {
#   id: Int8!
#   timestamp: Timestamp!
#   total: BigInt! @aggregate(fn: "sum", arg: "amount")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   lastClaimTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreatorFeeClaimedCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreatorFeeClaimed") {
#   id: Int8!
#   timestamp: Timestamp!
#   total: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   lastClaimTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreatorFeeClaimedCreatorStats
#   @aggregation(intervals: ["hour", "day"], source: "CreatorFeeClaimed") {
#   id: Int8!
#   creator: Bytes! @group(by: ["creator"])
#   timestamp: Timestamp!
#   total: BigInt! @aggregate(fn: "sum", arg: "amount")
#   count: BigInt! @aggregate(fn: "count", arg: "id")
#   lastClaimTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
# type CreatorFeeClaimedCreatorCumulativeStats
#   @aggregation(intervals: ["hour", "day"], source: "CreatorFeeClaimed") {
#   id: Int8!
#   creator: Bytes! @group(by: ["creator"])
#   timestamp: Timestamp!
#   total: BigInt! @aggregate(fn: "sum", arg: "amount", cumulative: true)
#   count: BigInt! @aggregate(fn: "count", arg: "id", cumulative: true)
#   lastClaimTimestamp: BigInt! @aggregate(fn: "max", arg: "blockTimestamp")
# }
#
